import pandas as pd
import numpy as np
from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

# Generate fake sales data, substitute with real data 
np.random.seed(42)
date_range = pd.date_range(start='2020-01-01', periods=100, freq='M')
sales = 200 + np.random.normal(0, 10, size=100).cumsum()
df = pd.DataFrame({'Date': date_range, 'Sales': sales}).set_index('Date')

# Forecast horizon
H = 3
train = df['Sales']

# Create target columns: t+1, t+2, t+3 (direct targets)
for h in range(1, H+1):
    df[f't+{h}'] = df['Sales'].shift(-h)

# Drop rows with NaNs
df_model = df.dropna()

# Fit separate ARIMA models for each horizon
predictions = {}
last_observed = train.iloc[:-H]  # Exclude last H points to fit
future_index = pd.date_range(start=df.index[-1] + pd.offsets.MonthBegin(), periods=H, freq='M')

for h in range(1, H+1):
    y = df_model[f't+{h}']
    model = ARIMA(train, order=(1, 1, 1))  # Adjust order as needed
    model_fit = model.fit()
    pred = model_fit.forecast(steps=h)[-1]  # Only keep h-step prediction
    predictions[f't+{h}'] = pred

# Combine predictions
direct_forecast = pd.Series(predictions, index=future_index)

# Plot
plt.figure(figsize=(10, 5))
plt.plot(df['Sales'], label='Historical Sales')
plt.plot(direct_forecast, label='Direct ARIMA Forecast', marker='o', color='green')
plt.title('ARIMA Direct Forecast (3 steps ahead)')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid()
plt.show()
